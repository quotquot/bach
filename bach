#!/usr/bin/env python3

# wget https://raw.githubusercontent.com/fraca7/pyplaybin/master/pyplaybin.py

import asyncio

import magic
mime = magic.open(magic.MAGIC_MIME)
mime.load()

import os
app_dir = os.path.expanduser('~/.librefm')

import configparser
config = configparser.ConfigParser()
config.read(os.path.join(app_dir, 'config'))

from sqlalchemy.ext.declarative import declarative_base
Base = declarative_base()

from datetime import datetime, timedelta
from sqlalchemy import create_engine, Column, DateTime, Float, Integer, String

#import acoustid

class Scrobble(Base):
    __tablename__ = 'scrobbles'

    id = Column(Integer, primary_key=True)
    artist = Column(String, nullable=False)
    title = Column(String, nullable=False)
    album = Column(String, nullable=False)
    album_artist = Column(String, nullable=False)
    track_number = Column(Integer, nullable=False)
    mbid = Column(String, nullable=False)
    duration = Column(Float, nullable=False)
    timestamp = Column(DateTime, nullable=False, default=datetime.now)
    submitted = Column(DateTime, default=None)

db_path = os.path.realpath(os.path.join(app_dir, 'db.sqlite'))
engine = create_engine('sqlite:///{}'.format(db_path))
Base.metadata.create_all(engine)

from sqlalchemy.orm import sessionmaker
Session = sessionmaker(bind=engine)

import mutagen
from collections import namedtuple
Info = namedtuple('Info', ('artist', 'title', 'album', 'album_artist', 'track_number', 'mbid', 'duration'))

def get_track_info(audiofile):

    d = mutagen.File(audiofile)

    if d is None:
        print('* unknown format', audiofile)
    elif isinstance(d, mutagen.mp3.MP3):
        t = d.tags
        if t.version == (2, 3, 0) and 'TXXX:MusicBrainz Release Track Id' in d:
            track = t['TRCK'][0]
            return Info(artist = t['TPE1'][0],
                        title = t['TIT2'][0],
                        album = t['TALB'][0],
                        album_artist = t['TPE2'][0],
                        track_number = int(track.split('/')[0]),
                        mbid = t['TXXX:MusicBrainz Release Track Id'][0],
                        duration = d.info.length)
        else:
            print('* not mb/wrong tags', audiofile)
    elif isinstance(d, mutagen.flac.FLAC):
        if 'musicbrainz_trackid' in d:
            track = '{}/{}'.format(int(d['tracknumber'][0]), int(d['tracktotal'][0]))
            return Info(artist = d['artist'][0],
                        title = d['title'][0],
                        album = d['album'][0],
                        album_artist = d['albumartist'][0],
                        track_number = int(d['tracknumber'][0]),
                        mbid = d['musicbrainz_trackid'][0],
                        duration = d.info.length)
        else:
            print('* not mb', audiofile)
    elif isinstance(d, mutagen.mp4.MP4):
        if '----:com.apple.iTunes:MusicBrainz Release Track Id' in d:
            track = '{}/{}'.format(*d['trkn'][0])
            return Info(artist = d['©ART'][0],
                        title = d['©nam'][0],
                        album = d['©alb'][0],
                        album_artist = d['soaa'][0],
                        track_number = int(d['trkn'][0][0]),
                        mbid = str(d['----:com.apple.iTunes:MusicBrainz Release Track Id'][0]),
                        duration = d.info.length)
        else:
            print('* not mb/wrong tags', audiofile)
    elif isinstance(d, mutagen.oggopus.OggOpus) or \
         isinstance(d, mutagen.oggvorbis.OggVorbis):
        if 'musicbrainz_releasetrackid' in d:
            track = '{}/{}'.format(d['tracknumber'][0], d['tracktotal'][0])
            return Info(artist = d['artist'][0],
                        title = d['title'][0],
                        album = d['album'][0],
                        album_artist = d['albumartist'][0],
                        track_number = int(d['tracknumber'][0]),
                        mbid = d['musicbrainz_releasetrackid'][0],
                        duration = d.info.length)
        else:
            print('* not mb/wrong tags', audiofile)
    else:
        print('* unmanaged format', audiofile, d.__class__.__name__)

import pylast
from pyplaybin import Playbin

class Player(Playbin):

    def __init__(self):
        Playbin.__init__(self)
        self.session = Session()
        self.network = None
        self.submit()
        self.queue = []
        self.eos = asyncio.Event()

    def add(self, *args):
        for arg in args:
            path = os.path.relpath(arg)
            if os.path.isdir(path):
                for file in sorted(os.listdir(path)):
                    #print(mime.file(os.path.join(path, file)))
                    if any(file.endswith('.'+suffix)
                           for suffix in ('flac', 'mp3', 'm4a', 'ogg', 'opus')):
                        self.queue.append(os.path.join(path, file))
            elif os.path.isfile(path):
                self.queue.append(path)
            else:
                print('* ignored: ', arg)

    def end_of_stream(self):
        self.eos.set()

    def async_error(self, exc):
        print(exc)

    async def start(self):
        try:
            while len(self.queue):

                audiofile = self.queue.pop(0)
                info = get_track_info(audiofile)

                if info is None:
                    continue

                info_as_dict = info._asdict()

                if self.network:
                    try:
                        self.network.update_now_playing(**info_as_dict)
                    except:
                        print('* now playing: error')

                await self.play(audiofile)
                print('{} — {} [{}]'.format(info.artist, info.title,
                                            '{:.0f}:{:02.0f}'.format(*divmod(info.duration, 60))))

                await self.eos.wait()
                self.eos.clear()
                await self.stop()

                scrobble = Scrobble(**info_as_dict)
                self.session.add(scrobble)
                self.session.commit()
                self.submit()
        except asyncio.CancelledError:
            await self.stop()

    def authenticate(self):

        if self.network:
            return

        try:
            self.network = pylast.LibreFMNetwork(
                api_key = config['api']['key'],
                api_secret = config['api']['secret'],
                username = config['librefm']['username'],
                password_hash = pylast.md5(config['librefm']['password']))
        except Exception as e:
            print('* authenticate: error', e)
            return

        print('* authenticate: ok')

    def submit(self):

        scrobbles = self.session.query(Scrobble) \
                                .filter(Scrobble.submitted == None) \
                                .order_by(Scrobble.timestamp)

        tracks = [ dict(artist = s.artist,
                        title = s.title,
                        album = s.album,
                        album_artist = s.album_artist,
                        track_number = s.track_number,
                        mbid = s.mbid,
                        duration = s.duration,
                        timestamp = s.timestamp.strftime('%s'))
                   for s in scrobbles ]

        if not len(tracks):
            return

        if self.network is None:
            self.authenticate()

        if self.network is None:
            return

        try:
            self.network.scrobble_many(tracks)
        except:
            print('* submit: error')
            return

        print('* submit:', len(tracks))

        now = datetime.now()
        for s in scrobbles:
            s.submitted = now
        self.session.commit()


import sys
import signal

Player.start_glib_loop()

try:
    loop = asyncio.get_event_loop()
    try:
        player = Player()
        player.authenticate()
        player.add(*sys.argv[1:])

        task = loop.create_task(player.start())
        loop.add_signal_handler(signal.SIGINT, task.cancel)
        loop.run_until_complete(task)
    finally:
        loop.close()
finally:
    Player.stop_glib_loop()
